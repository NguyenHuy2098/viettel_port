# Job templates
.job-build-source: &build-source
  stage: build-source
  artifacts:
    paths:
      - build/

.job-build-docker-image: &build-docker-image
  image: docker:stable
  services:
    - docker:dind
  variables:
    # When using dind service we need to instruct docker, to talk with the
    # daemon started inside of the service. The daemon is available with
    # a network connection instead of the default /var/run/docker.sock socket.
    #
    # The 'docker' hostname is the alias of the service container as described at
    # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
    #
    # Note that if you're using the Kubernetes executor, the variable should be set to
    # tcp://localhost:2375/ because of how the Kubernetes executor connects services
    # to the job container
    # DOCKER_HOST: tcp://localhost:2375/
    #
    # For non-Kubernetes executors, we use tcp://docker:2375/
    # DOCKER_HOST: tcp://docker:2375/
    # When using dind, it's wise to use the overlayfs driver for
    # improved performance.
    DOCKER_DRIVER: overlay2
    #
    # This will instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ''
  stage: build-docker-image
  cache: {}
  before_script:
    - docker info
    - docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_TOKEN} ${DOCKER_REGISTRY}
  script:
    - docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME} .
    - docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}

# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:lts-alpine

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

before_script:
  - ls -la .
  - yarn install

stages:
  - test
  - build-source
  - build-docker-image
  - release

# Stage: test
# Run all the jobs to make sure new source code is following team's convention

type-checking:
  stage: test
  script:
    - yarn tsc

lint-source:
  stage: test
  script:
    - yarn lint

unit-test:
  stage: test
  script:
    - yarn test:cov

# Stage: build-source
# Build the bundles

build-source:latest:
  <<: *build-source
  except:
    - production
    - qas
    - release
  script:
    - yarn build:development
  environment:
    name: development

build-source:qas:
  <<: *build-source
  only:
    - qas
  script:
    - yarn build:qas
  environment:
    name: qas

build-source:production:
  <<: *build-source
  only:
    - tags
  script:
    - yarn build:production
  environment:
    name: production

# Stage: build-docker-image
# Put bundles into docker images

build-docker-image:latest:
  <<: *build-docker-image
  only:
    - master
  dependencies:
    - build-source:latest
  environment:
    name: development
    url: $PORTAL_URL

build-docker-image:qas:
  <<: *build-docker-image
  only:
    - qas
  dependencies:
    - build-source:qas
  environment:
    name: qas
    url: $PORTAL_URL

build-docker-image:production:
  <<: *build-docker-image
  only:
    - tags
  dependencies:
    - build-source:production
  environment:
    name: production
    url: $PORTAL_URL

# Stage: release
# Automatically bump version, update changelog and readme
semantic-release:qas:
  image: node:lts-stretch
  stage: release
  only:
    - qas
  script:
    - yarn changelog
    - yarn semantic-release --branch=qas --dry-run

semantic-release:
  image: node:lts-stretch
  stage: release
  only:
    - release
  script:
    - yarn changelog
    - yarn semantic-release --branch=release
